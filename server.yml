Description: >
  Ayomide Johnson Salami / Software Engineer
  This template deploys an auto scaling group of min two servers in 2 private subnets, 
  with an application loadbalancer to distribute traffic between the servers.
  The servers have a launch templates with an nginx server installed and listening on port 80


Parameters:

    EnvironmentName:
        Description: Environment name that will be prefixed to resource names
        Type: String
    
    WebAppInstanceImageAMI:
        Description: AMI of Instance
        Type: String
        Default: "ami-0574da719dca65348"
    
    WebAppInstanceType:
        Description: Instance Type for web application
        Type: String
        Default: "t2.micro"

    BastionHostInstanceType:
        Description: Instance Type for jump host
        Type: String
        Default: "t2.micro"

Resources:
  # For the Loadbalancer Security Group
    LBSecGroup:
        Type: AWS::EC2::SecurityGroup
        Properties:
            GroupDescription: "Allow http to our load balancer"
            VpcId: 
              Fn::ImportValue: !Sub "${EnvironmentName}-VPCID"
            SecurityGroupIngress:
                - IpProtocol: tcp
                  FromPort: 80
                  ToPort: 80
                  CidrIp: 0.0.0.0/0
                - IpProtocol: tcp
                  FromPort: 443
                  ToPort: 443
                  CidrIp: 0.0.0.0/0
            SecurityGroupEgress:
                - IpProtocol: tcp
                  FromPort: 80
                  ToPort: 80
                  CidrIp: 0.0.0.0/0

  # Security group for the web servers in the private subnets.
    WebServerSecGroup:
        Type: AWS::EC2::SecurityGroup
        Properties:
            GroupDescription: Allow http to our hosts and SSH from local only
            VpcId: 
              Fn::ImportValue: !Sub "${EnvironmentName}-VPCID"
            SecurityGroupIngress:
                - IpProtocol: tcp
                  FromPort: 80
                  ToPort: 80
                  CidrIp: 0.0.0.0/0
                - IpProtocol: tcp
                  FromPort: 22
                  ToPort: 22
                  CidrIp: 0.0.0.0/0
            SecurityGroupEgress:
                - IpProtocol: tcp
                  FromPort: 0
                  ToPort: 65535
                  CidrIp: 0.0.0.0/0

    # Bastion Host Security Group
    BastionHostSecGroup:
        Type: AWS::EC2::SecurityGroup
        Properties:
            GroupDescription: Allow ssh to our hosts and access to all ports
            VpcId: 
              Fn::ImportValue: !Sub "${EnvironmentName}-VPCID"
            SecurityGroupIngress:
                - IpProtocol: tcp
                  FromPort: 22
                  ToPort: 22
                  CidrIp: 0.0.0.0/0
            SecurityGroupEgress:
                - IpProtocol: tcp
                  FromPort: 0
                  ToPort: 65535
                  CidrIp: 0.0.0.0/0

# Bastion Host
    BastionHost:
        Type: AWS::EC2::Instance
        Properties:
            ImageId: !Ref WebAppInstanceImageAMI
            KeyName: bastion-key
            InstanceType: !Ref BastionHostInstanceType
            NetworkInterfaces:
              - DeviceIndex: "0"
                AssociatePublicIpAddress: true
                GroupSet:
                  - !Ref BastionHostSecGroup
                SubnetId:
                  Fn::ImportValue: !Sub "${EnvironmentName}-PUB1-SN"
            BlockDeviceMappings:
              - DeviceName: "/dev/sdk"
                Ebs:
                    VolumeSize: 10


  # The launch configuration settings to use with the auto scaling group
    WebAppLaunchTemplate:
        Type: AWS::EC2::LaunchTemplate
        Properties:  
            LaunchTemplateData:
                UserData:
                    Fn::Base64: !Sub |
                        #!/bin/bash
                        sudo apt-get update -y
                        sudo apt-get install apache2 -y
                        sudo apt install net-tools -y
                        sudo systemctl start apache2.service
                        sudo systemctl enable apache2.service
                        sudo chown -R $USER:$USER /var/www
                        cd /var/www/html
                        aws s3 cp s3://udacity-demo-1/udacity.zip .
                        unzip -o udacity.zip
                        echo "Udacity Demo Web Server Up and Running!" > index.html
                ImageId: !Ref WebAppInstanceImageAMI
                KeyName: ayomide-altschool
                IamInstanceProfile:
                  Fn::ImportValue: !Sub "${EnivornmentName}-ProfileInstance"
                SecurityGroupIds: 
                    - !Ref WebServerSecGroup
                InstanceType: !Ref WebAppInstanceType
                BlockDeviceMappings:
                    - DeviceName: "/dev/sdk"
                      Ebs:
                        VolumeSize: 10


    # WebAppLaunchConfig:
    #     Type: AWS::AutoScaling::LaunchConfiguration
    #     Properties:
    #     UserData:
    #         Fn::Base64: !Sub |
    #             
    #             sudo apt-get update -y
    #             sudo apt-get install apache2 -y
    #             sudo apt install net-tools -y
    #             sudo systemctl start apache2.service
    #             sudo systemctl enable apache2.service
    #             sudo chown -R $USER:$USER /var/www
    #             cd /var/www/html
    #             echo "Udacity Demo Web Server Up and Running!" > index.html
    #     ImageId: !Ref WebAppInstanceImageAMI
    #     KeyName: ayomide-udacity
    #     SecurityGroups:
    #         - Ref: WebServerSecGroup
    #     InstanceType: !Ref WebAppInstanceType
    #     BlockDeviceMappings:
    #         - DeviceName: "/dev/sdk"
    #           Ebs:
    #             VolumeSize: 10

  # Autoscaling group for ec2 instances
    WebAppGroup:
        Type: AWS::AutoScaling::AutoScalingGroup
        Properties:
            VPCZoneIdentifier:
                - Fn::ImportValue: !Sub "${EnvironmentName}-PRI1-SN"
                - Fn::ImportValue: !Sub "${EnvironmentName}-PRI2-SN"
            LaunchTemplate:
                LaunchTemplateId: !Ref WebAppLaunchTemplate
                Version: !GetAtt WebAppLaunchTemplate.LatestVersionNumber
            # LaunchConfigurationName:
            #     Ref: WebAppLaunchConfig
            DesiredCapacity: "4"
            MinSize: "4"
            MaxSize: "4"
            TargetGroupARNs:
                - Ref: WebAppTargetGroup

  # Load balancer
    WebAppLB:
        Type: AWS::ElasticLoadBalancingV2::LoadBalancer
        Properties:
            Subnets:
                - Fn::ImportValue: !Sub ${EnvironmentName}-PUB1-SN
                - Fn::ImportValue: !Sub ${EnvironmentName}-PUB2-SN
            SecurityGroups:
                - Ref: LBSecGroup

  # The loadbalancer listener
    Listener:
        Type: AWS::ElasticLoadBalancingV2::Listener
        Properties:
            DefaultActions:
                - Type: forward
                  TargetGroupArn:
                    Ref: "WebAppTargetGroup"
            LoadBalancerArn:
                Ref: "WebAppLB"
            Port: 80
            Protocol: HTTP

  # The listerner rules
    ALBListenerRule:
        Type: AWS::ElasticLoadBalancingV2::ListenerRule
        Properties:
            Actions:
                - Type: forward
                  TargetGroupArn: !Ref "WebAppTargetGroup"
            Conditions:
                - Field: path-pattern
                  Values: [/]
            ListenerArn: !Ref "Listener"
            Priority: 1

  # The load balancing target group configuration
    WebAppTargetGroup:
        Type: AWS::ElasticLoadBalancingV2::TargetGroup
        Properties:
            HealthCheckIntervalSeconds: 10
            HealthCheckPath: /
            HealthCheckProtocol: HTTP
            HealthCheckTimeoutSeconds: 8
            HealthyThresholdCount: 2
            Port: 80
            Protocol: HTTP
            UnhealthyThresholdCount: 5
            VpcId: 
              Fn::ImportValue: !Sub "${EnvironmentName}-VPCID"


Outputs: 
    
    WebsiteURL:
        Description: Website URL
        Value: !Join [ "", [ 'http://', !GetAtt WebAppLB.DNSName ]]
        Export:
            Name: !Sub ${EnvironmentName}-DNS
